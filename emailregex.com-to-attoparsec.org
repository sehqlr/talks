#+TITLE: emailregex.com to Attoparsec: a walkthrough

#+OPTIONS: toc:nil
#+REVEAL_HLEVEL: 2
#+REVEAL_PLUGINS: (highlight notes)

#+MACRO: lambda  $$ (\lambda s.\!p)(s) $$ 
#+MACRO: mastodon  Mastodon: @sehqlr@mastodon.technology
#+MACRO: slack  stl-tech.slack.com: @sehqlr

* Meetup Blurb                                                     :noexport:
  Regular expressions (regexes) are a common tool used by programmers to match
  strings and to do simple parsing. However, humans have trouble parsing regexes
  when they get complicated: emailregex.com, for example. What can you do when
  your regex gets too big? Parser Combinators, of course! In this talk, I will
  walk the audience through a reimplementation of emailregex.com in Attoparsec, a
  popular parser combinator library on Hackage, explaining how it works along the
  way.

  Sam Hatfield is a software developer living in St. Louis. For the last five
  years heâ€™s worked in a diverse set of domains including DevOps and Fullstack Web
  Development. His research interests include data science and formal methods.
* Introduction
** Explanation of website
   Let's load up a saved version of the website with the adds removed

   #+begin_quote
   Email Address Regular Expression That 99.99% Works. Disagree? Join Discussion! 
   #+end_quote

   - The website says that it's powered by ZenBase, and they have a regex visualization tool alongside the regex itself
   - 
** Reveal the regex
   #+begin_example
   (?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])
   #+end_example
** Why is it so complex?
   This email regex doesn't just include the kind of email address that you
   include in registration forms. According to RFC5322, which is what this regex
   is based on, that is just the =addr-spec= without angle brackets, which is
   defined as "an alternate simple form" by the RFC.

   The regex (and our reimplementation) has to be able to parse these:
   =Sam H: <hey@samhatfield.me>=
   ...

* Theory
** Regex, briefly
   a string of characters and rules that describes a subset of all possible
   strings
** Combinators, briefly
** Parser Combinators
* Implementation
  fill up outline based on implementation
** First, we need to parse the parser
   So, how do we reimplement this thing with Attoparsec? Let's walk thru a
   possible path together. What follows is an idealized path to our final
   implementation. Obviously, each reimplementation you may attempt in future
   are going to be their own particular journey.

   The very first thing we are NOT going to do is start at the beginning of the
   expression and start to try to implement each parser function, which was my
   first instinct. Instead, since we are following an ideal path, we are going
   to think about the patterns and strutures in this problem, and break the
   regex into subregexes, implement those into parser functions, then use the
   combinators to arrive at our solution

   What is one thing that all email addresses have? =@=! That means we can now
   split this monster up into three parts, beforeAt, =@=, then afterAt.

   
* Demo & comparison
** demo on finding email addresses in all my messages from meetup.com
*** regex first
*** then atto

** qualitative analysis
*** better comments
*** lexical binding -> modular code

** quantitative/static analysis of source code??
** benchmarks??
* Closing
* Contact
  THANK YOU

  {{{mastodon}}}

  {{{slack}}}

  {{{email}}}

